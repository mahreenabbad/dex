;; sip010-token
;; (use-trait ft-trait .trait-sip-010.sip-010-trait)
  (impl-trait 'ST1NXBK3K5YYMD6FD41MVNP3JS1GABZ8TRVX023PT.sip-010-trait-ft-standard.sip-010-trait)
;; A SIP010-compliant fungible token with a mint function.
(define-constant ERR_UNAUTHORIZED (err u100))
(define-constant ERR_INVALID_AMOUNT (err u101))
(define-constant ERR_INVALID_RECIPIENT (err u102))
(define-constant ERR_TRANSFER_FAILED (err u1001))


;;  (use-trait sip-010-trait .sip-010-trait-ft-standard.sip-010-trait)



(define-fungible-token xxtoken u1000000000)
;; (define-constant contract-owner  tx-sender)
(define-data-var contract-owner principal tx-sender)


;; Constants/Variables
;; Stores metadata (optional 256-character UTF-8 string).
(define-data-var token-uri (optional (string-utf8 256)) none)


;; Errors



;; SIP-10 Functions
;;  Optional note (up to 34 bytes).
  ;; match: Evaluates memo.If present, prints it,If absent, skips it.
    ;; print logs the value of to-print (the content of memo) to the Stacks blockchain logs..
    ;; This is useful for debugging or auditing, but it doesnt affect the state of the contract.
    ;;  Stops execution if ft-transfer? fails.
;; (define-public (transfer
;;   (amount uint)
;;   (sender principal)
;;   (recipient principal)
;;   (memo (optional (buff 34)))
;; )
;;   (begin 
;;     (asserts! (is-eq tx-sender sender) ERR_UNAUTHORIZED)
;;     (asserts! (> amount u0) ERR_INVALID_AMOUNT)
;;     (asserts! (is-eq recipient) ERR_INVALID_RECIPIENT)
  
    
;;     (try! (ft-transfer? xxtoken amount sender recipient))
;;     (match memo to-print (print to-print) 0x)
;;     (ok true)
;;   )
;; )

(define-public (transfer
  (amount uint)
  (sender principal)
  (recipient principal)
  (memo (optional (buff 34)))
)
  (begin
    ;; Ensure the transfer amount is valid
    (asserts! (> amount u0) ERR_INVALID_AMOUNT)

    ;; Perform the token transfer
    (asserts! 
      (is-ok (ft-transfer? xxtoken amount sender recipient))
      ERR_TRANSFER_FAILED
    )

    ;; Print optional memo (if provided)
    (match memo to-print (print to-print) 0x)

    ;; Return success
    (ok true)
  )
)

(define-read-only (get-balance (owner principal))
  (ok (ft-get-balance xxtoken owner))
)

(define-read-only (get-name)
  (ok "xxtoken")
)

(define-read-only (get-symbol)
  (ok "XT")
)

(define-read-only (get-decimals)
  (ok u6)
)

(define-read-only (get-total-supply)
  (ok (ft-get-supply xxtoken))
)

(define-read-only (get-token-uri)
    (ok (var-get token-uri)
    )
)

(define-public (set-token-uri (value (string-utf8 256)))

;;   some: Wraps the new value in an optional type.
  (if (is-eq tx-sender (var-get contract-owner))
    (ok (var-set token-uri (some value)))
    (err ERR_UNAUTHORIZED)
  )
)



  ;; Make sure the length is within the limit.
  ;; Check if the sender is the contract owner.
   ;; Set the new token URI value wrapped in 'some'
   ;; Return success

 ;; Return error if not authorized


;; map: Applies the send-token function to each recipient in the list.
;; It generates a list of responses (success or error) for each transfer.

;; fold: Processes the list generated by map using the check-err function. It combines all responses into one final result.
;; Utility Functions
;; ---------------------------------------------------------
(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))
  (fold check-err (map send-token recipients) (ok true))
)

(define-private (check-err (result (response bool uint)) (prior (response bool uint)))
  (match prior ok-value result err-value (err u100))
)

(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))
  (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))
)

(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))
  (let ((transferOk (try! (transfer amount tx-sender to memo))))
    (ok transferOk)
  )
)

(define-public (mint (amount uint) (recipient principal))
	(begin
		
     (asserts! (> amount u0) ERR_INVALID_AMOUNT)
    (asserts! (is-eq recipient) ERR_INVALID_RECIPIENT)
		(ft-mint? xxtoken amount recipient)
	)
)